<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="/css/carousel.css" rel="stylesheet">

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-RQDM8MHQER"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-RQDM8MHQER');
    </script>


</head>



<title>Betterhop | Q&A Generator</title>
<!--<style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #questionForm, #qnaSpecific {
            margin-bottom: 20px;
        }
        #questions, #starresponse {
            display: flex;
            flex-direction: column; /* Change to column to stack items vertically */
            gap: 20px;
        }
        .question, .starresponse {
            background: #f9f9f9;
            padding: 10px;
            border: 1px solid #ddd;
            width: 100%; /* Ensure full width to create rows */
            box-sizing: border-box;
        }
        .rationale, .starresponse > div {
            margin-top: 10px;
        }
    </style>  -->
</head>

<body>

    <%- include('../partials/navbar') %> <!-- Include the navbar -->

        <div class="container marketing py-5">


            <div class="col-md-7">
                <h2 class="featurette-heading fw-normal lh-1">Present your best self: <span
                        class="text-body-secondary">AI Powering Your Path to Employment</span></h2>
                <p class="lead">Prepare for your next interview with customized questions tailored to your target job.
                    Our tool generates
                    key questions for both technical and interpersonal skills, helping you practice effectively and
                    enter
                    interviews with confidence.</p>
            </div>

            <form id="questionForm">
                <label for="roleInput"></label>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="role" name="role"
                        placeholder="Enter your dream job role" aria-label="Role" required>
                    <button class="btn btn-outline-secondary" type="submit">Generate Questions</button>
                </div>
            </form>
            <div id="questions"></div>

            <div class="accordion" id="accordionQuestions">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                            What do you need to do well in this role?
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne">
                        <div class="accordion-body" id="roleAdvice"></div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingTwo">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                            Hard Skills Interview Questions
                        </button>
                    </h2>
                    <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo">
                        <div class="accordion-body" id="hardSkills"></div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingThree">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                            Soft Skills Interview Questions
                        </button>
                    </h2>
                    <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree">
                        <div class="accordion-body" id="softSkills"></div>
                    </div>
                </div>
            </div>


            <hr class="featurette-divider">

            <div class="col-md-7">
                <h2 class="featurette-heading fw-normal lh-1">STAR Response Builder<span
                        class="text-body-secondary"></span></h2>
                <p class="lead">Input your interview question and
                    related experiences, and receive a structured answer in STAR format. This tool helps you articulate
                    your
                    achievements clearly and effectively.</p>
            </div>



            <form id="qnaSpecific">
                <div class="mb-3">
                    <label for="qnSpecific" class="form-label"> </label>
                    <textarea class="form-control" id="qnSpecific" name="qnSpecific"
                        placeholder="Input an interview question or copy from above section." required
                        oninput="autoResize(this)"></textarea>
                </div>
                <div class="mb-3">
                    <label for="ansSpecific" class="form-label"></label>
                    <textarea class="form-control" id="ansSpecific" name="ansSpecific"
                        placeholder="Describe a relevant experience" required oninput="autoResize(this)"></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Answer this in STAR format</button>
            </form>

            <div class="d-flex p-2"> </div>


            <!-- Initially hidden textarea for STAR responses -->
            <!-- STAR Response List (initially hidden) -->
            <div id="starResponseContainer" style="display:none;">
                <ul class="list-group list-group-horizontal-xxl" id="starResponseList">
                    <li class="list-group-item" id="situationItem">Situation:</li>
                    <li class="list-group-item" id="taskItem">Task:</li>
                    <li class="list-group-item" id="actionItem">Action:</li>
                    <li class="list-group-item" id="resultItem">Result:</li>
                </ul>
            </div>




            <script>
                function autoResize(textarea) {
                    textarea.style.height = 'auto';  // Reset the height
                    textarea.style.height = textarea.scrollHeight + 'px';  // Set the height to the scroll height
                }
            </script>





            <script>

                //////////FIRST EVENT LISTENER: generate interview questions for the input role///////////////////////

                /*
                        document.getElementById('questionForm').addEventListener('submit', async (event) => {
                            event.preventDefault();
                            const role = document.getElementById('role').value;
                
                            try {
                                const response = await fetch('/generate-questions', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({ role })
                                });
                
                                if (!response.ok) {
                                    throw new Error(`HTTP error! status: ${response.status}`);
                                }
                
                                const data = await response.json();
                                document.getElementById('questions').innerHTML = data.questions.map(q => `
                                    <div class="question">
                                        <p><strong>Question:</strong> ${q.question}</p>
                                        <p class="rationale"><strong>Rationale:</strong> ${q.rationale}</p>
                                    </div>
                                `).join('');
                            } catch (error) {
                                console.error('Error fetching questions:', error);
                                document.getElementById('questions').innerHTML = `<p>Error: ${error.message}</p>`;
                            }
                        });
                
                
                  
                document.getElementById('questionForm').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const role = document.getElementById('role').value;
                
                    try {
                        const response = await fetch('/generate-questions', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ role })
                        });
                
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                
                        const data = await response.json();
                        const accordion = document.getElementById('accordionQuestions');
                        accordion.innerHTML = ''; // Clear previous entries
                
                        data.questions.forEach((q, index) => {
                            accordion.innerHTML += `
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="heading${index}">
                                        <button class="accordion-button ${index !== 0 ? 'collapsed' : ''}" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${index}" aria-expanded="${index === 0}" aria-controls="collapse${index}">
                                            Question ${index + 1}
                                        </button>
                                    </h2>
                                    <div id="collapse${index}" class="accordion-collapse collapse ${index === 0 ? 'show' : ''}" aria-labelledby="heading${index}">
                                        <div class="accordion-body">
                                            <strong>Question:</strong> ${q.question}
                                            <p><strong>Rationale:</strong> ${q.rationale}</p>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                    } catch (error) {
                        console.error('Error fetching questions:', error);
                        document.getElementById('accordionQuestions').innerHTML = `<p>Error: ${error.message}</p>`;
                    }
                });
                
                */

                document.getElementById('questionForm').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const role = document.getElementById('role').value;

                    try {
                        const response = await fetch('/generate-questions', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ role })
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const { roleAdvice, hardSkills, softSkills } = await response.json();

                        document.getElementById('roleAdvice').innerHTML = roleAdvice ? roleAdvice : '<p>No specific advice available.</p>';
                        document.getElementById('hardSkills').innerHTML = hardSkills.length > 0 ?
                            hardSkills.map(skill => `<div><strong>Question:</strong> ${skill.question}<br><strong>Rationale:</strong> ${skill.rationale}<br><br></div>`).join('') :
                            '<p>No hard skills questions available.</p>';

                        document.getElementById('softSkills').innerHTML = softSkills.length > 0 ?
                            softSkills.map(skill => `<div><strong>Question:</strong> ${skill.question}<br><strong>Rationale:</strong> ${skill.rationale}<br><br></div>`).join('') :
                            '<p>No soft skills questions available.</p>';

                    } catch (error) {
                        console.error('Error fetching questions:', error);
                        document.getElementById('accordionQuestions').innerHTML = `<p>Error: ${error.message}</p>`;
                    }
                });




//////////SECOND EVENT LISTENER: based on the question to generate an answer PORTION///////////////////////

/*       document.getElementById('qnaSpecific').addEventListener('submit', async (event) => {
            event.preventDefault();
            const qnSpecific = document.getElementById('qnSpecific').value;
            const ansSpecific = document.getElementById('ansSpecific').value;

            try {
                const qnabody = JSON.stringify({ qnSpecific, ansSpecific });
                const starresponse = await fetch('/question-answer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: qnabody


                });

                if (!starresponse.ok) {
            throw new Error(`HTTP error! status: ${starresponse.status}`);
        }

        const data = await starresponse.json();
        const star = data.starresponse;

        // Update and show the textarea with the STAR response
        const starResponseArea = document.getElementById('starResponse');
        starResponseArea.value = `Situation: ${star.situation}\nTask: ${star.task}\nAction: ${star.action}\nResult: ${star.result}`;
        document.getElementById('starResponseContainer').style.display = 'block';

                } catch (error) {
                    console.error('Error fetching questions:', error);
                    document.getElementById('starResponseContainer').style.display = 'none';
                    alert(`Error: ${error.message}`); // Display error in alert or modify to show in a dedicated error element
                }
            });




<!-- Other content of interview.ejs -->
< !--This might include other HTML and script tags-- >
* /



                document.addEventListener('DOMContentLoaded', function () {
                    document.getElementById('qnaSpecific').addEventListener('submit', async (event) => {
                        event.preventDefault();
                        const qnSpecific = document.getElementById('qnSpecific').value;
                        const ansSpecific = document.getElementById('ansSpecific').value;

                        try {
                            const response = await fetch('/question-answer', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ qnSpecific, ansSpecific })
                            });

                            if (!response.ok) throw new Error('HTTP error, status = ' + response.status);

                            const data = await response.json();

                            if (data.error) {
                                // Display error message if any
                                document.getElementById('starResponseContainer').style.display = 'block';
                                document.getElementById('situationItem').textContent = data.error;
                                document.getElementById('taskItem').textContent = ""; // Clear other fields
                                document.getElementById('actionItem').textContent = "";
                                document.getElementById('resultItem').textContent = "";
                            } else {
                                const star = data.starresponse;
                                document.getElementById('situationItem').textContent = `Situation: ${star.situation}`;
                                document.getElementById('taskItem').textContent = `Task: ${star.task}`;
                                document.getElementById('actionItem').textContent = `Action: ${star.action}`;
                                document.getElementById('resultItem').textContent = `Result: ${star.result}`;
                                document.getElementById('starResponseContainer').style.display = 'block';
                            }
                        } catch (error) {
                            console.error('Error fetching questions:', error);
                            alert(`Error: ${error.message}`);
                            document.getElementById('starResponseContainer').style.display = 'none';
                        }
                    });
                });

            </script>


            <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

        </div>
        </div>
</body>

</html>