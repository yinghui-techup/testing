<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
        <link href="/css/carousel.css" rel="stylesheet">
    </head>



    <title>Interview Questions Generator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #questionForm, #qnaSpecific {
            margin-bottom: 20px;
        }
        #questions, #starresponse {
            display: flex;
            flex-direction: column; /* Change to column to stack items vertically */
            gap: 20px;
        }
        .question, .starresponse {
            background: #f9f9f9;
            padding: 10px;
            border: 1px solid #ddd;
            width: 100%; /* Ensure full width to create rows */
            box-sizing: border-box;
        }
        .rationale, .starresponse > div {
            margin-top: 10px;
        }
    </style>
</head>
<body>

    <%- include('../partials/navbar') %> <!-- Include the navbar -->

    
    
    <h1>Interview Questions Generator</h1>
    <form id="questionForm">
        <label for="role">Enter a business role:</label>
        <input type="text" id="role" name="role" required>
        <button type="submit">Generate Questions</button>
    </form>
    <div id="questions"></div>

    <h1>Q&A Section</h1>
    <form id="qnaSpecific">
        <label for="qnSpecific">Enter an interview question:</label>
        <input type="text" id="qnSpecific" name="qnSpecific" required><br>
        <label for="ansSpecific">Do you have an experience that can demostrate this?</label> 
        <input type="text" id="ansSpecific" name="ansSpecific" required> <br>
        <button type="submit">Answer this in STAR format</button>
    </form>
    <div id="starresponse"></div>

    <script>

//////////FIRST EVENT LISTENER: generate interview questions for the input role///////////////////////

        document.getElementById('questionForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const role = document.getElementById('role').value;

            try {
                const response = await fetch('/generate-questions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ role })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                document.getElementById('questions').innerHTML = data.questions.map(q => `
                    <div class="question">
                        <p><strong>Question:</strong> ${q.question}</p>
                        <p class="rationale"><strong>Rationale:</strong> ${q.rationale}</p>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error fetching questions:', error);
                document.getElementById('questions').innerHTML = `<p>Error: ${error.message}</p>`;
            }
        });




//////////SECOND EVENT LISTENER: based on the question to generate an answer PORTION///////////////////////

        document.getElementById('qnaSpecific').addEventListener('submit', async (event) => {
            event.preventDefault();
            const qnSpecific = document.getElementById('qnSpecific').value;
            const ansSpecific = document.getElementById('ansSpecific').value;

            try {
                const qnabody = JSON.stringify({ qnSpecific, ansSpecific });
                const starresponse = await fetch('/question-answer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: qnabody


                });

                if (!starresponse.ok) {
                    throw new Error(`HTTP error! status: ${starresponse.status}`);
                }

                const data = await starresponse.json();
                const star = data.starresponse;
                document.getElementById('starresponse').innerHTML = `
                    <div class="starresponse">
                        <p><strong>Situation:</strong> ${star.situation}</p>
                        <p><strong>Task:</strong> ${star.task}</p>
                        <p><strong>Action:</strong> ${star.action}</p>
                        <p><strong>Result:</strong> ${star.result}</p>
                    </div>
                `;

            } catch (error) {
                console.error('Error fetching questions:', error);
                document.getElementById('starresponse').innerHTML = `<p>Error: ${error.message}</p>`;
            }
        });
    </script>


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


</body>
</html>
